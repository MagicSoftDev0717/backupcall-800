// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique  
  emailVerified DateTime?
  name          String?
  image         String?
  passwordHash  String?
  phoneE164     String?   @unique
  pinCode       String?
  stripeId      String?
  googleSub     String?
  createdAt     DateTime  @default(now())
  
  accounts      Account[]
  calls         Call[]
  contacts      Contact[]
  sessions      Session[]
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  source    String
  fullName  String
  phoneE164 String
  email     String?
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, fullName])
  @@unique([userId, fullName]) 
}

model Call {
  id            String    @id @default(cuid())
  userId        String
  twilioCallSid String?
  contactId     String?
  startedAt     DateTime?
  endedAt       DateTime?
  billedSeconds Int       @default(0)
  billedCents   Int       @default(0)
  status        String
  recordingUrl  String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// *
///  * === NextAuth standard models ===
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
